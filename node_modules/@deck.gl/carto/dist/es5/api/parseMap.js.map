{"version":3,"sources":["../../../src/api/parseMap.ts"],"names":["parseMap","json","keplerMapConfig","datasets","version","config","mapState","mapStyle","visState","layers","layerBlending","interactionConfig","id","title","description","createdAt","updatedAt","initialViewState","extractTextLayers","reverse","map","type","visualChannels","dataId","dataset","find","d","data","Layer","propMap","defaultProps","createBlendingProps","textLabel","createInteractionProps","createStyleProps","createChannelProps","e","log","error","message","undefined","rest","configRest","filter","t","field","name","label","visConfig","opacity","parameters","blendFunc","blendEquation","pickable","tooltip","enabled","autoHighlight","mapProps","source","target","mapping","sourceKey","sourceValue","targetKey","Object","entries","key","value","result","stroked","getLineColor","getFillColor","highlightColor","enable3d","colorField","colorScale","sizeField","sizeScale","strokeColorField","strokeColorScale","heightField","heightScale","textLabelField","colorScaleType","colorAggregation","AGGREGATION","getColorValue","getColorWeight","colorRange","strokeOpacity","strokeColorRange","getElevation","heightRange","sizeRange","getPointRadius","radiusRange","getText","pointType","radius","getTextPixelOffset"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  AGGREGATION,\n  getLayer,\n  getColorAccessor,\n  getColorValueAccessor,\n  getSizeAccessor,\n  getTextAccessor,\n  getTextPixelOffsetAccessor\n} from './layer-map';\nimport {_flatten as flatten, log} from '@deck.gl/core';\nimport {assert} from '../utils';\n\nexport function parseMap(json) {\n  const {keplerMapConfig, datasets} = json;\n  assert(keplerMapConfig.version === 'v1', 'Only support Kepler v1');\n  const {mapState, mapStyle} = keplerMapConfig.config;\n  const {layers, layerBlending, interactionConfig} = keplerMapConfig.config.visState;\n\n  return {\n    id: json.id,\n    title: json.title,\n    description: json.description,\n    createdAt: json.createdAt,\n    updatedAt: json.updatedAt,\n    initialViewState: mapState,\n    mapStyle,\n    layers: extractTextLayers(layers.reverse()).map(({id, type, config, visualChannels}) => {\n      try {\n        const {dataId} = config;\n        const dataset = datasets.find(d => d.id === dataId);\n        assert(dataset, `No dataset matching dataId: ${dataId}`);\n        const {data} = dataset;\n        assert(data, `No data loaded for dataId: ${dataId}`);\n        const {Layer, propMap, defaultProps} = getLayer(type, config, dataset);\n        return new Layer({\n          id,\n          data,\n          ...defaultProps,\n          ...createBlendingProps(layerBlending),\n          ...(!config.textLabel && createInteractionProps(interactionConfig)),\n          ...createStyleProps(config, propMap),\n          ...createChannelProps(visualChannels, type, config, data) // Must come after style\n        });\n      } catch (e: any) {\n        log.error(e.message)();\n        return undefined;\n      }\n    })\n  };\n}\n\nfunction extractTextLayers(layers) {\n  return flatten(\n    layers.map(({id, config, ...rest}) => {\n      const {textLabel, ...configRest} = config;\n      return [\n        // Original layer without textLabel\n        {id, config: configRest, ...rest},\n\n        // One layer per valid text label, with full opacity\n        ...textLabel\n          .filter(t => t.field)\n          .map(t => {\n            return {\n              id: `${id}-label-${t.field.name}`,\n              config: {\n                textLabel: t,\n                ...configRest,\n                label: `${config.label}-label-${t.field.name}`,\n                visConfig: {...configRest.visConfig, opacity: 1}\n              },\n              ...rest\n            };\n          })\n      ];\n    })\n  );\n}\n\nfunction createBlendingProps(layerBlending) {\n  if (layerBlending === 'additive') {\n    return {\n      parameters: {\n        blendFunc: [GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: GL.FUNC_ADD\n      }\n    };\n  } else if (layerBlending === 'subtractive') {\n    return {\n      parameters: {\n        blendFunc: [GL.ONE, GL.ONE_MINUS_DST_COLOR, GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: [GL.FUNC_SUBTRACT, GL.FUNC_ADD]\n      }\n    };\n  }\n\n  return {};\n}\n\nfunction createInteractionProps(interactionConfig) {\n  const pickable = interactionConfig && interactionConfig.tooltip.enabled;\n  return {\n    autoHighlight: pickable,\n    pickable\n  };\n}\n\nfunction mapProps(source, target, mapping) {\n  for (const sourceKey in mapping) {\n    const sourceValue = source[sourceKey];\n    const targetKey = mapping[sourceKey];\n    if (sourceValue === undefined) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (typeof targetKey === 'string') {\n      target[targetKey] = sourceValue;\n    } else if (typeof targetKey === 'function') {\n      const [key, value] = Object.entries(targetKey(sourceValue))[0];\n      target[key] = value;\n    } else if (typeof targetKey === 'object') {\n      // Nested definition, recurse down one level (also handles arrays)\n      mapProps(sourceValue, target, targetKey);\n    }\n  }\n}\n\nfunction createStyleProps(config, mapping) {\n  const result: Record<string, any> = {};\n  mapProps(config, result, mapping);\n\n  // Kepler format sometimes omits strokeColor. TODO: remove once we can rely on\n  // `strokeColor` always being sert when `stroke: true`.\n  if (result.stroked && !result.getLineColor) {\n    result.getLineColor = result.getFillColor;\n  }\n  result.highlightColor = config.visConfig.enable3d ? [255, 255, 255, 60] : [252, 242, 26, 255];\n  return result;\n}\n\n/* eslint-disable complexity, max-statements */\nfunction createChannelProps(visualChannels, type, config, data) {\n  const {colorField, colorScale, sizeField, sizeScale, strokeColorField, strokeColorScale} =\n    visualChannels;\n  let {heightField, heightScale} = visualChannels;\n  if (type === 'hexagonId') {\n    heightField = sizeField;\n    heightScale = sizeScale;\n  }\n  const {textLabel, visConfig} = config;\n  const result: Record<string, any> = {};\n  const textLabelField = textLabel && textLabel.field;\n\n  if (type === 'grid' || type === 'hexagon') {\n    result.colorScaleType = colorScale;\n    if (colorField) {\n      const {colorAggregation} = config.visConfig;\n      if (!AGGREGATION[colorAggregation]) {\n        result.getColorValue = getColorValueAccessor(colorField, colorAggregation, data);\n      } else {\n        result.getColorWeight = d => [colorField.name];\n      }\n    }\n  } else if (colorField) {\n    result.getFillColor = getColorAccessor(\n      colorField,\n      colorScale,\n      visConfig.colorRange,\n      1, // Rely on layer opacity\n      data\n    );\n  }\n\n  if (strokeColorField) {\n    const opacity = visConfig.strokeOpacity !== undefined ? visConfig.strokeOpacity : 1;\n    result.getLineColor = getColorAccessor(\n      strokeColorField,\n      strokeColorScale,\n      visConfig.strokeColorRange,\n      opacity,\n      data\n    );\n  }\n  if (heightField) {\n    result.getElevation = getSizeAccessor(\n      heightField,\n      heightScale,\n      visConfig.heightRange || visConfig.sizeRange,\n      data\n    );\n  }\n  if (sizeField) {\n    result.getPointRadius = getSizeAccessor(\n      sizeField,\n      sizeScale,\n      visConfig.radiusRange || visConfig.sizeRange,\n      data\n    );\n  }\n  if (textLabelField) {\n    result.getText = getTextAccessor(textLabelField, data);\n    result.pointType = 'text';\n    const radius = result.getPointRadius || visConfig.radius;\n    result.getTextPixelOffset = getTextPixelOffsetAccessor(textLabel, radius);\n  }\n\n  return result;\n}\n"],"file":"parseMap.js"}