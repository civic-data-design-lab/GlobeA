{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","uniqueIdProperty","credentials","connection","format","formatTiles","clientId","geoColumn","columns","CartoLayer","state","apiVersion","getSubLayers","length","props","localCreds","log","assert","Object","values","API_VERSIONS","includes","V1","V2","MAP_TYPES","QUERY","TILESET","V3","COLUMNS_SUPPORT","join","GEO_COLUMN_SUPPORT","Array","isArray","oldProps","changeFlags","_checkProps","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","rest","localConfig","result","MVTLayer","FORMATS","TILEJSON","tileUrl","URL","tiles","searchParams","get","TILE_FORMATS","MVT","CartoTileLayer","GeoJsonLayer","updateTriggers","_getSubLayerAndProps","layer","getSubLayerProps","id","layerName","CompositeLayer"],"mappings":"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","sourcesContent":["import {CompositeLayer, log} from '@deck.gl/core';\nimport CartoTileLayer from './carto-tile-layer';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {fetchLayerData, getDataV2, API_VERSIONS} from '../api';\nimport {\n  COLUMNS_SUPPORT,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MAP_TYPES,\n  TILE_FORMATS\n} from '../api/maps-api-common';\nimport {getDefaultCredentials} from '../config';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n  uniqueIdProperty: 'cartodb_id',\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): format of data\n  format: null,\n\n  // (String, optional): force format of data for tiles\n  formatTiles: null,\n\n  // (String, optional): clientId identifier used for internal tracing, place here a string to identify the client who is doing the request.\n  clientId: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null}\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props) {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (!COLUMNS_SUPPORT.includes(type)) {\n        log.assert(!columns, `columns prop is only supported for types: ${COLUMNS_SUPPORT.join()}`);\n      }\n      if (!GEO_COLUMN_SUPPORT.includes(type)) {\n        log.assert(\n          !geoColumn,\n          `geoColumn prop is only supported for types: ${GEO_COLUMN_SUPPORT.join()}`\n        );\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      props.format !== oldProps.format ||\n      props.formatTiles !== oldProps.formatTiles ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const {type, data: source, clientId, credentials, ...rest} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let result;\n      if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        result = {data: await getDataV2({type, source, credentials})};\n      } else {\n        result = await fetchLayerData({type, source, clientId, credentials, ...rest});\n      }\n\n      this.setState({...result, apiVersion});\n      this.props.onDataLoad(result.data);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  _getSubLayerAndProps() {\n    const {data, format, apiVersion} = this.state;\n\n    const {uniqueIdProperty} = defaultProps;\n    const props = {uniqueIdProperty, ...this.props};\n    delete props.data;\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      return [MVTLayer, props];\n    }\n\n    if (format === FORMATS.TILEJSON) {\n      /* global URL */\n      const tileUrl = new URL(data.tiles[0]);\n\n      props.formatTiles =\n        props.formatTiles || tileUrl.searchParams.get('formatTiles') || TILE_FORMATS.MVT;\n\n      return props.formatTiles === TILE_FORMATS.MVT ? [MVTLayer, props] : [CartoTileLayer, props];\n    }\n\n    // It's a geojson layer\n    return [GeoJsonLayer, props];\n  }\n\n  renderLayers() {\n    const {data} = this.state;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    const [layer, props] = this._getSubLayerAndProps();\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}